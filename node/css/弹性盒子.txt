1. 什么是弹性盒子？
  +它能实现一种布局模式————弹性布局。弹性盒子提供了很多有用的属性，无需使用浮动或inline-block值就能够把多个元素排成一行，而且容器内的元素能自动调整宽度，这一点与宽度是
   百分比值的浮动元素特别相似。、
  +它不是所有浏览器都支持。

2.什么是弹性容器？
  任何html元素都可以作为弹性容器，不过通常使用div标签或其他html结构标签。

3. 什么是弹性项目？
  直接嵌套在弹性容器里的标签叫弹性项目。弹性容器的每一个直接子代都会自动变成弹性项目。

4. 如何使用弹性盒子？
  e.g：
  <div class="container">
    <div>A flex item</div>
    <div>Another flex item</div>
    <div>A third flex item</div>
  </div>
  .container {
    display: flex;
  }
  .container div {
    /* 让容器内各个div标签的宽度相等，并在一起填满整个容器 */
    flex: 1;
  }
  .container div:nth-of-type(1n+2) {
    margin-left: 20px;
  }
  优点：使用弹性盒子，无需像浮动的元素那样，担心元素会从容器里溢出，而且可以轻易地创建等高的列。
  缺点：要理解众多相关的属性，以及如何跳出思维的局限，自由组合各个属性。

5. 弹性盒子相关的属性：
  + 如果想把html标签变成弹性盒子，可以：
    display: flex;
    ps：display属性可以把元素变成block（块级元素）、inline（行内元素）、block-inline（行内块级元素）和隐藏元素（none）。
  + 默认情况下，弹性项目并排显示在一行。而且，浏览器只在一行里显示各个弹性项目，不会换行。即不管浏览器窗口有多窄，即使窄到内容从弹性项目中溢出，各个弹性项目始终会并排
    显示，不会有弹性项目显示在下一行。
  + flex-flow属性既能控制弹性项目的排列方向，也能控制是否换行。
    e.g:
    .container {
      display: flex;
      flex-flow: column nowrap;
    }
    它有两个参数，first是指明方向，second是指明是否换行。
  + justify-content属性告诉浏览器把弹性项目显示在一行里的什么位置，只有为弹性项目设置了宽度，而且各个项目的宽度之和小于弹性容器的宽度时，这个属性才起作用。
    e.g：
    .container {
      display: flex;
      /* 均匀分布各弹性项目，项目之间的空间大小相同，最左边的项目靠在容器的左边，最右边的项目靠在容器的右边 */
      justify-content: space-around;
    }
  + align-items属性决定高度不同的弹性项目在弹性容器中的纵向对齐方式。默认情况下，弹性项目会拉伸，因此高度都相同。
    - flex-start：把各个弹性项目的顶边与容器的顶边对齐
    - flex-end：把各个弹性项目的底边与容器的底边对齐
    - center： 把各个弹性项目的纵向中心线与容器的纵向中心线对齐
    - baseline： 把各个弹性项目里第一个元素的基线对齐
    - stretch: 常规对齐方式，拉伸容器里的每一个项目，是的各个项目的高度相同。
  + align-content属性告诉浏览器如何放置显示为多行的弹性项目，它需要满足：弹性容器必须允许换行；弹性容器的高度必须大于多行显示的弹性项目。
    - flex-start：把各个弹性项目放在容器的顶部
    - flex-end：把各个弹性项目放在容器的底部
    - center： 把各个弹性项目的纵向中心线与容器的纵向中心线对齐
    - stretch: 常规对齐方式，拉伸容器里的每一个项目，是的各个项目的高度相同。
    - space-between： 把纵向额外的空间平分在各行之间，最上面一行放在容器的顶部，最下一行放在容器的底部。
    - space-around： 把空间平均分布到各行的上下，包括最上面一行和最下面一行。
  + order属性用于为弹性项目设置数值，指明项目在行或列里的位置。这样一来，与html源码出现的顺序无关。可以让html源码中的最后一个元素显示在一行的开头，
    或者让第一个元素显示在一行的末尾。
    e.g：
      .content {
        display: -webkit-flex;
        display: flex;
      }
      .sidebar1 {
        -webkit-order: 1;
        order: 1;
      }
      .main {
        -webkit-order: 2;
        order: 2;
      }
      .sidebar2 {
        -webkit-order:3;
        order: 3;
      }
    order属性的数值与z-index属性的数值作用类似，因此不必要使用连续的数字，浏览器会按照从小到大的顺序排列。不过，有时候只想把一列移到最
    左端或最右端，此时，只需为想移动的项目设置order属性，其他项目都别设置。
    e.g：
      .content {
        display: -webkit-flex;
        display: flex;
      }
      .sidebar1 {
        -webkit-order: -1;
        order: -1;
      }
    通过设置值为-1，项目会被移动到弹性容器的左边，显示在其他项目之前。相反，把第一个侧栏的order属性设置为1，而其他元素的order属性都不设置，
    那个侧栏会移动到最右边。
  + align-self属性的作用与弹性容器的align-items属性类似。不同的是，align-items应用于容器里的所有项目，而align-self属性只应用于单个弹性
    项目。这个属性应用于单个项目上，它会覆盖align-items属性的值。即能做到，可以让容器里的所有弹性项目都靠容器上部对齐，但是只让某个项目靠
    底部对齐。
  + flex属性是控制弹性项目的宽度，使用它可以轻易实现“弹性的”列，或者根据容器的尺寸变化而改变宽度，即使容器的尺寸是未知的或者动态变化的。
    - 第一个参数是一个数字（flex-grow），指明弹性项目的相对宽度。弹性项目的真实宽度由两个因数确定：在css中为flex属性设置的值和容器中弹性项目的数量。
    - 第二个参数也是数字，设定的是flex-shrink属性。当容器的宽度 < 各项目宽度之和， 并且只有容器不换行时，flex-shrink属性会起作用。此时，flex-shrink属性
      控制弹性项目能变得多窄，或弹性项目能收窄多少。能收窄的量取决于为弹性项目设置的宽度，即flex属性的最后一个值。
    - 最后一个值针对flex-basis属性，其作用是设置弹性项目的基准宽度。可以使用绝对值或者百分比值。为他设置的值可以理解为弹性项目的最小宽度。
      flex-basis属性的值就是弹性项目的宽度，不过具体的宽度由flex属性中的其他属性值决定，可能大于flex-basis属性的值，也可能小于。
      如果不设置flex-basis属性的值，而且把flex-grow属性的值设置为0，那么弹性项目会一直收窄，能多窄就收多窄。
    e.g:
      .sidebar1 {
        /* 没有设置最小宽度，也没有设置flex-grow属性的值，因此会收窄 */
        flex: 0 1;
      }
      .sidebar2 {
        flex: 0 1;
      }
      .main {
        /* flex属性值为1，所以会弹性变化，宽度会增大，占满一行里剩下的全部可用空间 */
        flex: 1 1;
      }

6. 自动确定弹性项目的外边距
  弹性项目的外边距不折叠，可以把外边距的值设置为auto，让浏览器根据可用空间调整外边距的值。
  e.g：
    .banner {
      /* 把横幅的div设置为弹性容器 */
      display: -webkit-flex;
      display: flex;
      /* 让弹性项目的底部与弹性容器的底部对齐 */
      -webkit-align-items: flex-end;
      align-items: flex-end;
    }
    .logo {
      /* 让浏览器根据可用空间自行设置外边距的大小，即把横幅中可用的空间放到logo的右边 */
      margin-right: auto;
    }

7. 当flex-grow和flex-basis的值都设置时，浏览器如何确定弹性项目的宽度？
   1.计算出所有容器项目的最小宽度，即flex-basis值之和
   2.计算弹性容器剩余宽度，即容器宽度-最小宽度
   3.根据各容器项目的flex-grow属性值，按比例分配剩余宽度
   4.最后确定弹性项目的宽度为 最小宽度+分配到的宽度

8. 如何使用flex属性？
  1. 把所有弹性项目发在一行里。如果只想创建一行宽度不同的项目，不允许弹性容器换行，此时只为flex属性提供一个值即可。比如要在一行里创建
     两个侧边栏和一个主内容区域，让主内容区域占容器宽度的一半，让两个侧边栏各占容器宽度的25%，可以这样做：
        .container {
          display: flex;
          flex-flow: row nowrap;
        }
        .sidebar1 {
          flex: 1;
        }
        .sidebar2 {
          flex: 1;
        }
        .main {
          flex: 2;
        }
      在这里不用设置flex-shrink和flex-basis属性，因为只想得到几个宽度比例保持不变的弹性项目。
    2. 保持一行里各个项目的宽度比例，但是当容器太窄，无法并排显示项目时，允许换行。弹性项目在一行里放不下时，如果想让项目换行，那就
       为容器设置wrap选项，并且按照flex-grow属性值的比例设置各个弹性项目的flex-basis属性。
          .container {
            display: flex;
            flex-flow: row wrap;
          }
          .sidebar1 {
            flex: 1 1 100px;
          }
          .sidebar2 {
             flex:1 1 100px;
          }
          .main {
            flex: 2 1 200px;
          }
      为了让各个弹性项目的宽度之比与flex-grow属性的值保持一致，应该按照flex-grow属性的比例设置flex-basis属性的值。
    3. flex-basis属性的值用于确定何时换行，可以把flex-basis属性的值当做响应式设计中的断点。
